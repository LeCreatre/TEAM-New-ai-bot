
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openai import OpenAI

# --- Load env ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_CHATS = [cid.strip() for cid in os.getenv("ALLOWED_CHATS","").split(",") if cid.strip()]

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("Please set BOT_TOKEN and OPENAI_API_KEY in .env")

# --- Init ---
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
oai = OpenAI(api_key=OPENAI_API_KEY)

# --- Constants ---
TEAM_LINK = "https://teamuni.uz"
TOUR_3D = "https://my.matterport.com/show/?m=xoz1yxpFF7t"
ADMISSIONS_CHAT = "https://t.me/teamuni_uz"
PHONE = "+998 71 200 20 60"

# Load knowledge base
KB_PATH = os.path.join(os.path.dirname(__file__), "knowledge_base.md")
with open(KB_PATH, "r", encoding="utf-8") as f:
    KNOWLEDGE = f.read()

SYSTEM_PROMPT = """–¢—ã ‚Äî AI‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç TEAM University. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ‚Äë—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. 
–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã —Å TEAM University 
(–ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –¥–µ–¥–ª–∞–π–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å–æ–±—ã—Ç–∏—è, –∫–∞–º–ø—É—Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã, 3D —Ç—É—Ä, –∏ —Ç.–ø.).
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ —Ç–µ–º–∞—Ç–∏–∫–∏ TEAM University ‚Äî –æ—Ç–∫–∞–∂–∏—Å—å –∏ –≤–µ–∂–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ 
–ø–æ TEAM University, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.

–ü—Ä–∞–≤–∏–ª–∞:
1) –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º: –æ—Ç–≤–µ—á–∞–π —Ä–æ–≤–Ω–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π 1‚Äë2 –º–æ–º–µ–Ω—Ç–∞.
2) –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏, –∫–∞–∫ —É—Ç–æ—á–Ω–∏—Ç—å —É Admissions.
3) –í–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç —Å—Å—ã–ª–∫–∏/–∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã (3D —Ç—É—Ä, —Å–∞–π—Ç, —á–∞—Ç Admissions, —Ç–µ–ª–µ—Ñ–æ–Ω).
4) –°–æ—Ö—Ä–∞–Ω—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–æ–Ω, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞."""

# Simple keyword gate to reject clearly off-topic queries before LLM
TEAM_KEYWORDS = [
    "team university", "team uni", "—Ç–∏–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—Ç–∏–º —É–Ω–∏", "—Ç–∏–º—É–Ω–∏", "teamuni",
    "pre-foundation", "foundation", "ifc", "–±–∞–∫–∞–ª–∞–≤—Ä", "ba (hons)", "–∫–∞–º–ø—É—Å", "lsbu",
    "–ø–æ—Å—Ç—É–ø–ª–µ–Ω", "–ø—Ä–∏–µ–º", "admissions", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–æ–ø–ª–∞—Ç–∞", "–¥–µ–¥–ª–∞–π–Ω", "3d", "—Ç—É—Ä",
    "–∫–æ–º—å—é–Ω–∏—Ç–∏", "–∏–≤–µ–Ω—Ç", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç", "—Å—Ç–∏–ø–µ–Ω–¥", "–≥—Ä–∞–Ω—Ç", "startup challenge", "–∫–æ–º–ø–∞—Å", "–∫–∞—Ñ–µ–¥—Ä–∞"
]

def is_team_related(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in TEAM_KEYWORDS)

def main_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="3D –ö–∞–º–ø—É—Å –¢—É—Ä", url=TOUR_3D)
    kb.button(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    kb.button(text="–ß–∞—Ç —Å Admissions", url=ADMISSIONS_CHAT)
    kb.adjust(2,1)
    return kb.as_markup()

@dp.message(CommandStart())
async def start(message: Message):
    # Optional chat allow-list
    if ALLOWED_CHATS and str(message.chat.id) not in ALLOWED_CHATS:
        return await message.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç <b>TEAM University</b>.\n"
        "–û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ TEAM University: –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–∞–º–ø—É—Å –∏ —Ç.–¥.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    )
    await message.answer(text, reply_markup=main_menu_kb())

@dp.callback_query(F.data == "contacts")
async def contacts(cb: CallbackQuery):
    await cb.message.answer(
        f"üìû –ü—Ä–∏—ë–º–Ω–∞—è (Admissions): <b>{PHONE}</b>\n"
        f"‚úâÔ∏è –ß–∞—Ç: {ADMISSIONS_CHAT}\n"
        f"üåê –°–∞–π—Ç: {TEAM_LINK}",
        reply_markup=main_menu_kb()
    )
    await cb.answer()

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "–Ø –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é <b>—Ç–æ–ª—å–∫–æ</b> –ø–æ TEAM University.\n"
        "–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –¥–µ–¥–ª–∞–π–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–∞–º–ø—É—Å, 3D —Ç—É—Ä.\n",
        reply_markup=main_menu_kb()
    )

async def generate_answer(user_text: str) -> str:
    # Compose messages for the model
    messages = [
        {{ "role": "system", "content": SYSTEM_PROMPT }},
        {{ "role": "system", "content": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n" + KNOWLEDGE }},
        {{ "role": "user", "content": user_text.strip() }}
    ]
    try:
        resp = oai.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.3,
            max_tokens=600
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return (f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç Admissions: {ADMISSIONS_CHAT} –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ {PHONE}.")

@dp.message()
async def handle_message(message: Message):
    if ALLOWED_CHATS and str(message.chat.id) not in ALLOWED_CHATS:
        return
    text = (message.text or "").strip()
    if not text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ TEAM University.", reply_markup=main_menu_kb())

    # Off-topic guardrail before calling the model
    if not is_team_related(text):
        return await message.answer(
            "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ <b>TEAM University</b>.\n"
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
            reply_markup=main_menu_kb()
        )

    answer = await generate_answer(text)
    await message.answer(answer, reply_markup=main_menu_kb())

if __name__ == "__main__":
    import asyncio
    async def _main():
        print("Bot is starting...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    asyncio.run(_main())
